diff --git a/epgclone.c b/epgclone.c
index 46397d1..1988035 100644
--- a/epgclone.c
+++ b/epgclone.c
@@ -49,9 +49,16 @@ void cEpgClone::CloneEvent(cEvent *Source, cEvent *Dest) {
      Dest->SetSeen();
   tChannelID channelID;
   if (dest_num) {
+#if APIVERSNUM >= 20301
+     LOCK_CHANNELS_READ;
+     const cChannel *dest_chan = Channels->GetByNumber(dest_num);
+     if (dest_chan)
+        channelID = Channels->GetByNumber(dest_num)->GetChannelID();
+#else
      cChannel *dest_chan = Channels.GetByNumber(dest_num);
      if (dest_chan)
         channelID = Channels.GetByNumber(dest_num)->GetChannelID();
+#endif
      else
         channelID = tChannelID::InvalidID;
      }
diff --git a/setup_menu.c b/setup_menu.c
index 8b60870..03d6cbc 100644
--- a/setup_menu.c
+++ b/setup_menu.c
@@ -251,6 +251,10 @@ eOSState cMenuSetupEpgfixer::ProcessKey(eKeys Key)
 {
   eOSState state = cMenuSetupPage::ProcessKey(Key);
 
+#if APIVERSNUM >= 20301
+  LOCK_SCHEDULES_WRITE;
+#endif
+
   if (state == osUnknown) {
      switch (Key) {
        case kRed:
@@ -264,9 +268,15 @@ eOSState cMenuSetupEpgfixer::ProcessKey(eKeys Key)
          break;
        case kBlue:
          Skins.Message(mtInfo, tr("Clearing EPG data..."));
+#if APIVERSNUM >= 20301
+         for (cSchedule *Schedule = Schedules->First(); Schedule; Schedule = Schedules->Next(Schedule))
+            Schedule->Cleanup(INT_MAX);
+         cEitFilter::SetDisableUntil(time(NULL) + 10);
+#else
          cEitFilter::SetDisableUntil(time(NULL) + 10);
          if (cSchedules::ClearAll())
             cEitFilter::SetDisableUntil(time(NULL) + 10);
+#endif
          Skins.Message(mtInfo, NULL);
          state = osContinue;
          break;
diff --git a/tools.c b/tools.c
index 9c9133d..dee353b 100644
--- a/tools.c
+++ b/tools.c
@@ -465,17 +465,26 @@ void cAddEventThread::Action(void)
   SetPriority(19);
   while (Running() && !LastHandleEvent.TimedOut()) {
         cAddEventListItem *e = NULL;
+#if APIVERSNUM >= 20301
+        LOCK_SCHEDULES_WRITE;
+#else
         cSchedulesLock SchedulesLock(true, 10);
-        cSchedules *schedules = (cSchedules *)cSchedules::Schedules(SchedulesLock);
+        cSchedules *Schedules = (cSchedules *)cSchedules::Schedules(SchedulesLock);
+#endif
         Lock();
-        while (schedules && (e = list->First()) != NULL) {
+        while (Schedules && (e = list->First()) != NULL) {
               tChannelID chanid = e->GetChannelID();
+#if APIVERSNUM >= 20301
+              LOCK_CHANNELS_READ;
+              const cChannel *chan = Channels->GetByChannelID(chanid);
+#else
               cChannel *chan = Channels.GetByChannelID(chanid);
+#endif
               if (!chan) {
                  error("Destination channel %s not found for cloning!", *chanid.ToString());
                  }
               else {
-                 cSchedule *schedule = (cSchedule *)schedules->GetSchedule(chan, true);
+                 cSchedule *schedule = (cSchedule *)Schedules->GetSchedule(chan, true);
                  if (schedule) {
                     schedule->AddEvent(e->GetEvent());
                     EpgHandlers.SortSchedule(schedule);
@@ -553,7 +562,12 @@ bool cListItem::IsActive(tChannelID ChannelID)
   bool active = false;
   if (numchannels > 0) {
      int i = 0;
+#if APIVERSNUM >= 20301
+     LOCK_CHANNELS_READ;
+     int channel_number = Channels->GetByChannelID(ChannelID)->Number();
+#else
      int channel_number = Channels.GetByChannelID(ChannelID)->Number();
+#endif
      while (i < numchannels) {
            if ((channel_number == GetChannelNum(i)) ||
                (GetChannelID(i) && (ChannelID == *GetChannelID(i)))) {
